name: Tests and Code Quality

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-benchmark black mypy
    
    - name: Check code formatting with black
      run: |
        black --check src/ || echo "Code formatting issues found"
    
    - name: Type checking with mypy
      run: |
        mypy src/ --ignore-missing-imports || echo "Type checking issues found"
    
    - name: Run tests with pytest
      run: |
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=term
      continue-on-error: true
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Test core modules individually
      run: |
        python -c "from src.config import Config; c = Config(); c.validate(); print('✓ Config module working')"
        python -c "from src.eeg_preprocessing import EEGPreprocessor; import numpy as np; p = EEGPreprocessor(256); d = p.preprocess(np.random.randn(32, 2560)); print('✓ Preprocessing module working')"
        python -c "from src.eeg_features import EEGFeatureExtractor; import numpy as np; e = EEGFeatureExtractor(256); f = e.extract_features(np.random.randn(32, 2560)); print('✓ Feature extraction module working')"
        python -c "from src.emotion_recognition_model import EmotionRecognitionModel; m = EmotionRecognitionModel((167,)); m.build_model('dense'); print('✓ Model module working')"

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install linting tools
      run: |
        pip install flake8 pylint
    
    - name: Lint with flake8
      run: |
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Lint with pylint
      run: |
        pylint src/ --exit-zero --max-line-length=127
      continue-on-error: true

  docs:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Verify documentation files exist
      run: |
        test -f README.md || exit 1
        test -f ARCHITECTURE.md || exit 1
        test -f CHANGELOG.md || exit 1
        test -f CONTRIBUTING.md || exit 1
        test -f LICENSE || exit 1
        echo "✓ All documentation files present"
    
    - name: Check for broken links in markdown
      uses: gaurav-nelson/github-action-markdown-link-check@v1
      with:
        use-quiet-mode: 'yes'
        config-file: '.github/markdown-link-check-config.json'
      continue-on-error: true

  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        pip install safety bandit
    
    - name: Check for security vulnerabilities with safety
      run: |
        pip install -r requirements.txt
        safety check --json || echo "Security vulnerabilities found"
      continue-on-error: true
    
    - name: Run security checks with bandit
      run: |
        bandit -r src/ -f json -o bandit-report.json || echo "Security issues found"
      continue-on-error: true
