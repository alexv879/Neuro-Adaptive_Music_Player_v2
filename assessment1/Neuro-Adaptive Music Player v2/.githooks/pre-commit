#!/bin/sh
#
# Pre-commit hook to prevent committing sensitive files
# 
# Installation:
#   git config core.hooksPath .githooks
#
# Or copy to .git/hooks/:
#   cp .githooks/pre-commit .git/hooks/pre-commit
#   chmod +x .git/hooks/pre-commit
#

# Colors for output
RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
NC='\033[0m' # No Color

# Check if we're committing any .env files (except .env.example)
if git diff --cached --name-only | grep -E "^\.env$|^\.env\..*$" | grep -v "\.env\.example$"; then
    echo "${RED}❌ ERROR: Attempting to commit sensitive .env file!${NC}"
    echo ""
    echo "${YELLOW}The following files should NOT be committed:${NC}"
    git diff --cached --name-only | grep -E "^\.env$|^\.env\..*$" | grep -v "\.env\.example$"
    echo ""
    echo "${YELLOW}To fix this:${NC}"
    echo "  1. Remove the file from staging:"
    echo "     ${GREEN}git reset HEAD .env${NC}"
    echo ""
    echo "  2. Ensure .gitignore excludes .env files"
    echo ""
    echo "  3. Verify .env is in .gitignore:"
    echo "     ${GREEN}git check-ignore .env${NC}"
    echo ""
    exit 1
fi

# Check for other sensitive files
SENSITIVE_PATTERNS="credentials\.json|secrets\.yml|.*_credentials\.py|\.pem$|\.key$"
if git diff --cached --name-only | grep -E "$SENSITIVE_PATTERNS"; then
    echo "${YELLOW}⚠️  WARNING: You are about to commit potentially sensitive files:${NC}"
    git diff --cached --name-only | grep -E "$SENSITIVE_PATTERNS"
    echo ""
    echo "Are you sure these files should be committed? (y/N)"
    read -r response
    if [ "$response" != "y" ] && [ "$response" != "Y" ]; then
        echo "${RED}Commit aborted.${NC}"
        exit 1
    fi
fi

# All checks passed
echo "${GREEN}✓ Pre-commit checks passed${NC}"
exit 0
